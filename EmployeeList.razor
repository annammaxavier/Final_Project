@page "/employeelist"
@using EmployeeM.Services.Employeeservices
@using EmployeeM.Data
@inject IEmployeeRepository _employeeRepository
@inject NavigationManager navigationManager
<h3>Employee List</h3>
@if (employeelist == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <button class=" btn btn-primary" @onclick="AddNewEmployee">Add New</button>
      <table>
        <thead>
            <tr>
                <th>ID</th>
                <th>FirstName (C)</th>
                <th>LastName (C)</th>
                <th>Position(F)</th>
                <th>Salary(F)</th>
                <th>DateOfJoining(F)</th>
                <th>Action</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var employee in employeelist)
            {
                <tr>
                    <td>@employee.employeeId</td>
                    <td>@employee.employeeFirstName</td>
                    <td>@employee.employeeLastName</td>
                    <td>@employee.employeePosition</td>
                    <td>@employee.employeeSalary</td>
                    <td>@employee.employeeDateOfJoining</td>
                    <td>
                        <button class="btn-info" @onclick=@(()=> UpdateEmployee(employee))>Edit</button>
                        <button class="btn-danger" @onclick=@(()=> DeleteEmployee(employee))>Delete</button>
                    </td>
                  
                </tr>
            }
        </tbody>
  </table>
}

@code {
    private IEnumerable<EmployeeInfo> employeelist;
    protected override Task OnInitializedAsync()
    {
        employeelist = await _employeeRepository.GetProductAsync();
    }
    public void AddNewEmployee(){
        navigationManager.NavigateTo("addupdateemployee");
    }
    public void UpdateEmployee(EmployeeInfo employeeInfo){
        navigationManager.NavigateTo("updateemployee/{employeeInfo EmployeeID}");

    }
    public async void DeleteEmployee(EmployeeInfo employeeInfo){
        await _employeeRepository.DeleteEmployeeAsync(employeeInfo.EmployeeId);
        employeelist = await _employeeRepository.GetEmployeeAsync();
        this.StateHasChanged();
    }

}
